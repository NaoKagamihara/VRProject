/*************************************************************************//*!
	@file	CGameSummary.h
	@brief	PmGameSceneに追加する基底クラス

														@author	鏡原
														@date	None
*//**************************************************************************/

//ONCE
#pragma once

//INCLUDE
#include		"CBase.h"

/*******************************//*!
	@brief	シーンに追加するオブジェクトを管理する基底クラス

			このクラスを継承したクラスをSceneに追加して使用する

*//********************************/
class CGameSummary : public CBase
{
public:

	/*************************************************************************//*!
		@brief			コンストラクタ
		@param			None

		@return			None
	*//**************************************************************************/
	CGameSummary(){};

	/*************************************************************************//*!
		@brief			デストラクタ
		@param			None

		@return			None
	*//**************************************************************************/
	virtual ~CGameSummary(){};

	/*************************************************************************//*!
		@brief			作成
		@param			None

		@return			None
	*//**************************************************************************/
	virtual void Create(){};

	/*************************************************************************//*!
		@brief			初期化
		@param			None

		@return			None
	*//**************************************************************************/
	virtual void Initialize(){};

	/*************************************************************************//*!
		@brief			更新
		@param			None

		@return			None
	*//**************************************************************************/
	virtual void Update(){};

	/*************************************************************************//*!
		@brief			Updateの後に更新

						Updateの計算の計算を行い、物理エンジンの計算を行った後に<br>
						RearUpdateが呼ばれる
						
		@param			None		

		@return			None
	*//**************************************************************************/
	virtual void RearUpdate(){};

	/*************************************************************************//*!
		@brief			描画				
		@param			None		

		@return			None
	*//**************************************************************************/
	virtual void Render(){};

	/*************************************************************************//*!
		@brief			Renderの後に描画

						Renderがすべて呼ばれた後に呼ばれる
						
		@param			None		

		@return			None
	*//**************************************************************************/
	virtual void RearRender(){};

	/*************************************************************************//*!
		@brief			デバッグ用の描画
		@param			None		

		@return			None
	*//**************************************************************************/
	virtual void DebugRender(){};

	/*************************************************************************//*!
		@brief			解放
		@param			None		

		@return			None
	*//**************************************************************************/
	virtual void Release(){};
};