/*************************************************************************//*!
					
					@file	VRCamera.h
					@brief	VR用カメラクラス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__VRCAMERA__H__

#define		__VRCAMERA__H__

//INCLUDE
#include	"VRManager.h"

namespace Mof {
	
	/*******************************//*!
	@brief	カメラ基底クラス

			カメラ基底となるクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CVRCamera : public CCamera {
	protected:
		/*******************//*!
		適用視点
		*//********************/
		CVRManager::Eye			m_NowEye;
		/*******************//*!
		カメラ位置
		*//********************/
		CVector3				m_VRPosition[CVRManager::Eye::Count+1];
		/*******************//*!
		カメラ位置
		*//********************/
		CVector3				m_VRFront[CVRManager::Eye::Count];
		/*******************//*!
		ビュー行列
		*//********************/
		CMatrix44				m_VRViewMatrix[CVRManager::Eye::Count];
		/*******************//*!
		ビルボード
		*//********************/
		CMatrix33				m_VRBillBoardMatrix[CVRManager::Eye::Count];
		/*******************//*!
		射影行列
		*//********************/
		CMatrix44				m_VRProjectionMatrix[CVRManager::Eye::Count];
		/*******************//*!
		ビュープロジェクション行列
		*//********************/
		CMatrix44				m_VRViewProjectionMatrix[CVRManager::Eye::Count];
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CVRCamera();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pName		カメラ名

				@return			None
		*//**************************************************************************/
		CVRCamera(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピーカメラ

				@return			None
		*//**************************************************************************/
		CVRCamera(const CVRCamera& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CVRCamera();

		/*************************************************************************//*!
				@brief			カメラの更新<br>
								設定されている情報からカメラに必要な各種行列を計算しなおす
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Update(void);

		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			有効視点切り替え
				@param[in]		eye		視点
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetNowEye(CVRManager::Eye eye);
		/*************************************************************************//*!
				@brief			ビューポート設定<br>
								画面サイズから自動的に設定を行う。
				@param			None
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetViewPort(void);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			カメラ位置取得
				@param			None

				@return			カメラ位置
		*//**************************************************************************/
		virtual CVector3& GetViewPosition(void);
		/*************************************************************************//*!
				@brief			カメラ位置取得
				@param			None

				@return			カメラ位置
		*//**************************************************************************/
		virtual CVector3& GetCameraPosition(void);
		/*************************************************************************//*!
				@brief			ビュー行列取得
				@param			None

				@return			ビュー行列
		*//**************************************************************************/
		virtual CMatrix44& GetViewMatrix(void);
		/*************************************************************************//*!
				@brief			ビルボード行列取得
				@param			None

				@return			ビルボード行列
		*//**************************************************************************/
		virtual CMatrix33& GetBillBoardMatrix(void);
		/*************************************************************************//*!
				@brief			プロジェクション行列取得
				@param			None

				@return			プロジェクション行列
		*//**************************************************************************/
		virtual CMatrix44& GetProjectionMatrix(void);
		/*************************************************************************//*!
				@brief			ビュープロジェクション行列取得
				@param			None

				@return			ビュープロジェクション行列
		*//**************************************************************************/
		virtual CMatrix44& GetViewProjectionMatrix(void);

		/*************************************************************************//*!
				@brief			視線ベクトル取得
				@param			None

				@return			視線ベクトル
		*//**************************************************************************/
		virtual CVector3& GetViewFront(void);
	};

	typedef CVRCamera* LPVRCamera;
#include	"VRCamera.inl"
}

#endif

//[EOF]