/*************************************************************************//*!
	@file	PmGameScene.h
	@brief	ゲームの動作管理基底クラス

														@author	鏡原
														@date	None
*//**************************************************************************/

//ONCE
#pragma once

//INCLUDE
#include		"PmGameSummary.h"

/*******************************//*!
	@brief	シーンと更新、描画、メモリ解放を一括して行う基底クラス

			physxのシーンとそのシーンに追加されたPmObjectを管理する<br>
			CGameSummaryを持つ、全体の更新や描画開放などを一括で行う

*//********************************/
class PmGameScene : public CBase
{
private:
	PmManager m_Manager;						//!<Physxを動かすために必要（Physxの一つのシーンを管理する)
	vector<CGameSummary*> mv_pObject;			//!<オブジェクトの更新、描画するのに必要

	bool debugMode;

protected:

	//ManagerのFluidを渡す
	PxParticleFluid* getFluid(){ return m_Manager.getFluid(); };

	/*************************************************************************//*!
		@brief			CGameSummaryをシーンに追加する	

		@param[in]		sum		シーンに追加するCGameSummary

		@return			None
	*//**************************************************************************/
	void addSummary(CGameSummary* sum);

	/*************************************************************************//*!
		@brief			PmGameSummarをシーンに追加する		

		@param[in]		sum		シーンに追加するPmGameSummary

		@return			None
	*//**************************************************************************/
	void addPmSummary(PmGameSummary* sum);
public:
	
	////////////////////////////////////////////////////
	//継承先で、シーンに追加したいオブジェクトを定義する

	/*************************************************************************//*!
		@brief			コンストラクタ
		@param			None		

		@return			None
	*//**************************************************************************/
	PmGameScene();

	/*************************************************************************//*!
		@brief			デストラクタ
		@param			None		

		@return			None
	*//**************************************************************************/
	virtual ~PmGameScene(){};

	/*************************************************************************//*!
		@brief			シーンにオブジェクトを追加するための純粋仮想関数
		@param			None

		@return			None
	*//**************************************************************************/
	virtual void Create() = 0;

	/******************************************************************************
	**シーンを動かすためのメソッド
	******************************************************************************/


	/*************************************************************************//*!
		@brief			Physxを使用するための初期化	
		@param			None		

		@return			None
	*//**************************************************************************/
	void Preparation();

	/*************************************************************************//*!
		@brief			初期化

						このシーンに追加されているすべてのオブジェクトの生成、初期化の順で呼ぶ<br>
						Create(),Initialize()の順番でシーンに追加された順番で呼ばれる

		@param			None

		@return			None
	*//**************************************************************************/
	void Initialize();

	/*************************************************************************//*!
		@brief			リセット

						シーンに追加されているすべてのオブジェクトを初期化する<br>
						Initialize()がシーンに追加された順番で呼ばれる

		@param			None

		@return			None
	*//**************************************************************************/
	void Risetto();

	/*************************************************************************//*!
		@brief			更新

						このシーンに追加されているすべてのオブジェクトの更新関数を以下の順番で呼ぶ<br>
						それぞれの関数の中ではシーンに追加された順番で呼ばれる
						1.Update()
						2.Physxの更新
						3.RearUpdate()

		@param			None

		@return			None
	*//**************************************************************************/
	void Update();

	/*************************************************************************//*!
		@brief			描画

						このシーンに追加されているすべてのオブジェクトの描画関数を以下の順番で呼ぶ<br>
						それぞれの関数の中ではシーンに追加された順番で呼ばれる
						1.Render()
						2.RearRender()

		@param			None

		@return			None
	*//**************************************************************************/
	void Render();

	/*************************************************************************//*!
		@brief			メモリ解放

						このシーンに追加されたすべてのオブジェクトのメモリを解放する
						Release()がシーンに追加された順番で呼ばれる

		@param			None

		@return			None
	*//**************************************************************************/
	void Release();

	/*************************************************************************//*!
		@brief			シーンの初期化

		@param			None

		@return			None
	*//**************************************************************************/
	virtual void SceneInitialize(){};

	/*************************************************************************//*!
		@brief			シーンの更新

						シーンのPmObjectのUpdate前に呼ばれる

		@param			None

		@return			None
	*//**************************************************************************/
	virtual void SceneUpdate(){};

	/*************************************************************************//*!
	@brief			シーンの更新のあとの更新

					シーンのPmObjectのRearUpdate後に呼ばれる

	@param			None

	@return			None
	*//**************************************************************************/
	virtual void SceneRearUpdate(){};

	/*************************************************************************//*!
	@brief			シーンのデバッグ用描画

	@param			None

	@return			None
	*//**************************************************************************/
	virtual void SceneDebugRender(){};

	/*************************************************************************//*!
	@brief			シーンのデバッグ用描画

	@param			None

	@return			None
	*//**************************************************************************/
	virtual void SceneRelease(){};

};